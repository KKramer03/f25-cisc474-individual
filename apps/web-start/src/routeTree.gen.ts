/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AcademicCoursesIndexRouteImport } from './routes/_academic/courses/index'
import { Route as AcademicAssignmentsIndexRouteImport } from './routes/_academic/assignments/index'
import { Route as OtherCalendarCalendarRouteImport } from './routes/_other/_calendar/calendar'
import { Route as OtherCalendarInboxIndexRouteImport } from './routes/_other/_calendar/inbox/index'
import { Route as AcademicCoursesCourseIndexRouteImport } from './routes/_academic/courses/$course/index'
import { Route as AcademicCoursesCourseGradesIndexRouteImport } from './routes/_academic/courses/$course/grades/index'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AcademicCoursesIndexRoute = AcademicCoursesIndexRouteImport.update({
  id: '/_academic/courses/',
  path: '/courses/',
  getParentRoute: () => rootRouteImport,
} as any)
const AcademicAssignmentsIndexRoute =
  AcademicAssignmentsIndexRouteImport.update({
    id: '/_academic/assignments/',
    path: '/assignments/',
    getParentRoute: () => rootRouteImport,
  } as any)
const OtherCalendarCalendarRoute = OtherCalendarCalendarRouteImport.update({
  id: '/_other/_calendar/calendar',
  path: '/calendar',
  getParentRoute: () => rootRouteImport,
} as any)
const OtherCalendarInboxIndexRoute = OtherCalendarInboxIndexRouteImport.update({
  id: '/_other/_calendar/inbox/',
  path: '/inbox/',
  getParentRoute: () => rootRouteImport,
} as any)
const AcademicCoursesCourseIndexRoute =
  AcademicCoursesCourseIndexRouteImport.update({
    id: '/_academic/courses/$course/',
    path: '/courses/$course/',
    getParentRoute: () => rootRouteImport,
  } as any)
const AcademicCoursesCourseGradesIndexRoute =
  AcademicCoursesCourseGradesIndexRouteImport.update({
    id: '/_academic/courses/$course/grades/',
    path: '/courses/$course/grades/',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/calendar': typeof OtherCalendarCalendarRoute
  '/assignments': typeof AcademicAssignmentsIndexRoute
  '/courses': typeof AcademicCoursesIndexRoute
  '/courses/$course': typeof AcademicCoursesCourseIndexRoute
  '/inbox': typeof OtherCalendarInboxIndexRoute
  '/courses/$course/grades': typeof AcademicCoursesCourseGradesIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/calendar': typeof OtherCalendarCalendarRoute
  '/assignments': typeof AcademicAssignmentsIndexRoute
  '/courses': typeof AcademicCoursesIndexRoute
  '/courses/$course': typeof AcademicCoursesCourseIndexRoute
  '/inbox': typeof OtherCalendarInboxIndexRoute
  '/courses/$course/grades': typeof AcademicCoursesCourseGradesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_other/_calendar/calendar': typeof OtherCalendarCalendarRoute
  '/_academic/assignments/': typeof AcademicAssignmentsIndexRoute
  '/_academic/courses/': typeof AcademicCoursesIndexRoute
  '/_academic/courses/$course/': typeof AcademicCoursesCourseIndexRoute
  '/_other/_calendar/inbox/': typeof OtherCalendarInboxIndexRoute
  '/_academic/courses/$course/grades/': typeof AcademicCoursesCourseGradesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/calendar'
    | '/assignments'
    | '/courses'
    | '/courses/$course'
    | '/inbox'
    | '/courses/$course/grades'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/calendar'
    | '/assignments'
    | '/courses'
    | '/courses/$course'
    | '/inbox'
    | '/courses/$course/grades'
  id:
    | '__root__'
    | '/'
    | '/_other/_calendar/calendar'
    | '/_academic/assignments/'
    | '/_academic/courses/'
    | '/_academic/courses/$course/'
    | '/_other/_calendar/inbox/'
    | '/_academic/courses/$course/grades/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  OtherCalendarCalendarRoute: typeof OtherCalendarCalendarRoute
  AcademicAssignmentsIndexRoute: typeof AcademicAssignmentsIndexRoute
  AcademicCoursesIndexRoute: typeof AcademicCoursesIndexRoute
  AcademicCoursesCourseIndexRoute: typeof AcademicCoursesCourseIndexRoute
  OtherCalendarInboxIndexRoute: typeof OtherCalendarInboxIndexRoute
  AcademicCoursesCourseGradesIndexRoute: typeof AcademicCoursesCourseGradesIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_academic/courses/': {
      id: '/_academic/courses/'
      path: '/courses'
      fullPath: '/courses'
      preLoaderRoute: typeof AcademicCoursesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_academic/assignments/': {
      id: '/_academic/assignments/'
      path: '/assignments'
      fullPath: '/assignments'
      preLoaderRoute: typeof AcademicAssignmentsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_other/_calendar/calendar': {
      id: '/_other/_calendar/calendar'
      path: '/calendar'
      fullPath: '/calendar'
      preLoaderRoute: typeof OtherCalendarCalendarRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_other/_calendar/inbox/': {
      id: '/_other/_calendar/inbox/'
      path: '/inbox'
      fullPath: '/inbox'
      preLoaderRoute: typeof OtherCalendarInboxIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_academic/courses/$course/': {
      id: '/_academic/courses/$course/'
      path: '/courses/$course'
      fullPath: '/courses/$course'
      preLoaderRoute: typeof AcademicCoursesCourseIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_academic/courses/$course/grades/': {
      id: '/_academic/courses/$course/grades/'
      path: '/courses/$course/grades'
      fullPath: '/courses/$course/grades'
      preLoaderRoute: typeof AcademicCoursesCourseGradesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  OtherCalendarCalendarRoute: OtherCalendarCalendarRoute,
  AcademicAssignmentsIndexRoute: AcademicAssignmentsIndexRoute,
  AcademicCoursesIndexRoute: AcademicCoursesIndexRoute,
  AcademicCoursesCourseIndexRoute: AcademicCoursesCourseIndexRoute,
  OtherCalendarInboxIndexRoute: OtherCalendarInboxIndexRoute,
  AcademicCoursesCourseGradesIndexRoute: AcademicCoursesCourseGradesIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
